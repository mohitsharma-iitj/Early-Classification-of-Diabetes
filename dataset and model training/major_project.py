# -*- coding: utf-8 -*-
"""Major_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nv5MzBniPvS_HnMrTQaXzZLgxlnia8cW
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn import metrics
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.ensemble import VotingClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder 
from sklearn.preprocessing import MinMaxScaler

"""# Pre-processing"""

df=pd.read_csv('/content/drive/MyDrive/4th sem/PR-ML[3-0-2] - cmn/major project/diabetes_data.csv',sep=';')

df['gender'].replace(['Male', 'Female'],[0, 1], inplace=True)

pd.unique(df['gender'])

df.head()

df.info()

"""#Train Test"""

# Choosing the features and the label
X = df.iloc[:, :-1]
y = df.iloc[:, -1]

# train and test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

type(X_train)

X_train = pd.DataFrame(X_train)
type(X_train)
# X_train.values
# type(X_train)

encoder = MinMaxScaler()
X_train = encoder.fit_transform(X_train.values)
X_test = encoder.transform(X_test.values)


# # here i  wiil use flask

# import pickle

# pickle.dump(classifier_lr, open('model.pkl','wb'))

# # Loading model to compare the results
# model = pickle.load(open('model.pkl','rb'))


print(X_train)
print(X_test)

import pickle

pickle.dump(encoder, open('transform_data_of_array.pkl','wb'))

# Loading model to compare the results
transform_data_of_array = pickle.load(open('transform_data_of_array.pkl','rb'))

"""# Visualization"""

import seaborn as sns
import matplotlib.pyplot as plt

# sns.pairplot(df, hue='class', height=2)

# sns.scatterplot( x="polyuria",data=df,
#                 hue='class')
  
# # Placing Legend outside the Figure
# plt.legend(bbox_to_anchor=(1, 1), loc=2)
  
# plt.show()

type(X_train)

"""# Data Prediction"""

# X_train = X_train.to_numpy()

# Logistic Regression
classifier_lr = LogisticRegression(random_state=0)
classifier_lr.fit(X_train, y_train.values)

lr_test_score = classifier_lr.score(X_test, y_test)

lr_test_score = classifier_lr.score(X_test, y_test)
lr_test_score

print(classifier_lr.predict(X_test))
# print(y_test.array)
type(y_test)

import pickle

pickle.dump(classifier_lr, open('model.pkl','wb'))

# Loading model to compare the results
model = pickle.load(open('model.pkl','rb'))
# print(model.predict([[2, 9, 6]]))

# let transform 4 row of dataset to check
# 0- male,1 - female
data_a = [30,1,1,0,1,1,1,0,0,0,0,1,0,0,0,0]
trans1 = transform_data_of_array.transform([data_a])
trans1

data_a = [60,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1]
trans2 = transform_data_of_array.transform([data_a])
trans2

k1 = model.predict(trans1)
k1
# k2 = model.predict(trans2)
# k2

for i in range(1,15):
    print(i)

